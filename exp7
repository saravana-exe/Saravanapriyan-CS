import numpy as np
import matplotlib.pyplot as plt
from sklearn.datasets import load_iris
from sklearn.preprocessing import StandardScaler
data = load_iris()
X = data.data
y = data.target
n_features = X.shape[1]
n_classes = len(np.unique(y))
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
print("First 5 rows of the original dataset (scaled):")
print(X_scaled[:5])
print("Corresponding target labels for the first 5 rows:")
print(y[:5])
mean_vectors = []
for cl in range(n_classes):
    mean_vectors.append(np.mean(X_scaled[y == cl], axis=0))
S_W = np.zeros((n_features, n_features))
S_B = np.zeros((n_features, n_features))
overall_mean = np.mean(X_scaled, axis=0)
for cl, mean_vec in enumerate(mean_vectors):
    class_scatter = np.cov(X_scaled[y == cl].T)
    S_W += class_scatter * (X_scaled[y == cl].shape[0] - 1)
    n_cl = X_scaled[y == cl].shape[0]
    mean_diff = (mean_vec - overall_mean).reshape(n_features, 1)
    S_B += n_cl * (mean_diff @ mean_diff.T)
eigen_values, eigen_vectors = np.linalg.eig(np.linalg.inv(S_W).dot(S_B))
sorted_indices = np.argsort(eigen_values)[::-1]
eigen_values = eigen_values[sorted_indices]
eigen_vectors = eigen_vectors[:, sorted_indices]
k = 2
W = eigen_vectors[:, :k]
X_lda = X_scaled.dot(W)
colors = ['r', 'g', 'b']
labels = data.target_names
plt.figure(figsize=(8, 6))
for cl, color, label in zip(np.unique(y), colors, labels):
    plt.scatter(X_lda[y == cl, 0], X_lda[y == cl, 1], c=color, label=label, alpha=0.7)
plt.title('LDA: 2D Projection of Iris Dataset')
plt.xlabel('LD1')
plt.ylabel('LD2')
plt.legend(loc='best')
plt.grid()
plt.show()
